from crewai.tools import BaseTool
from typing import Type
from pydantic import BaseModel, Field
import os 
from llama_parse import LlamaParse

output_dir = "src/ontology_population_project/agent-output/Gradio"
os.makedirs(output_dir, exist_ok=True)



#Extracting data from charts and graphs

document_structure_prompt = """
Le document Ã  analyser est un rapport mÃ©dical complexe au format PDF, gÃ©nÃ©ralement structurÃ© de la maniÃ¨re suivante :

1. **Tableaux diagnostiques structurÃ©s**  
   - Chaque tableau correspond Ã  un **critÃ¨re diagnostique psychiatrique** Ã©crit en titre.
   - Colonnes typiques :  
     - QP (Question Parent) et QE (Question Enseignant) â€” identifiants des questions (peu utiles pour la suite).  
     - Texte de la **question posÃ©e** dÃ©crivant un **signe clinique** observÃ©.  
     - Scores donnÃ©s par 4 Ã©valuateurs : P1 (Parent 1), P2 (Parent 2), E1 (Enseignant 1), E2 (Enseignant 2).  
   - Chaque ligne reprÃ©sente un **signe clinique** Ã©valuÃ© par les 4 acteurs.  
   - Les **deux derniÃ¨res lignes** du tableau prÃ©sentent une **synthÃ¨se** :  
     - Nombre de critÃ¨res majeurs validÃ©s  
     - T-score

   ðŸ‘‰ Merci dâ€™extraire fidÃ¨lement les lignes et colonnes utiles (signe clinique + scores par Ã©valuateur + synthÃ¨se). Les identifiants QP/QE peuvent Ãªtre ignorÃ©s.

2. **Figure finale : graphique en barres**  
   - Le graphique contient 11 symptÃ´mes sur lâ€™axe horizontal.  
   - Pour chaque symptÃ´me, on trouve 4 barres (scores) correspondant aux Ã©valuations de :  
     - Maman  
     - Papa  
     - Enseignant 1  
     - Enseignant 2  
   - Total attendu : 44 barres (11 symptÃ´mes Ã— 4 Ã©valuateurs)


Merci de restituer les informations de maniÃ¨re lisible, hiÃ©rarchique et exploitable.
"""



parser = LlamaParse(
   result_type="markdown",  # "markdown" and "text" are available,
   
    extract_charts=True,

    auto_mode=True,

    auto_mode_trigger_on_image_in_page=True,

    auto_mode_trigger_on_table_in_page=True,
    language="fr", # Optionally you can define a language, default=en   
    verbose=True,
   user_prompt= document_structure_prompt
   
   )

class ParsingTool(BaseTool):
    name: str = "Outil de parsing PDF mÃ©dical basÃ© sur LlamaParse"
    description: str = (
        """ Cet outil extrait le contenu structurÃ© (textes, tableaux, graphiques) Ã  partir dâ€™un fichier PDF mÃ©dical.
            Il est spÃ©cialement conÃ§u pour reconnaÃ®tre les tableaux cliniques.

            Args:
                file_path (str): Chemin du fichier PDF Ã  analyser.
                patient_name (str): le dossier dans le quel il faut enregistrer l'output du parseur

            Returns:
                str: Texte extrait et structurÃ©, prÃªt Ã  Ãªtre nettoyÃ© et transformÃ© en reprÃ©sentation sÃ©mantique."""
    )

    def _run(self, file_path: str, patient_name:str) -> str:
        # Implementation goes here
        result_charts = parser.load_data(file_path)
        result=result_charts[0].text
        patient_dir = os.path.join(output_dir, patient_name)
        os.makedirs(patient_dir, exist_ok=True) 
        output_path = os.path.join( patient_dir, "llama_parser_output.txt")
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(result)
            
        return result
    
